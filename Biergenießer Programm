#include <LiquidCrystal.h> 
#include <IRremote.h> 
 
int RECV_PIN = 31; 
IRrecv irrecv(RECV_PIN); 
decode_results results; 
LiquidCrystal lcd(30,36,42,44,45,43); 

int eingang= A7; //Das Wort „eingang“ steht jetzt für den Wert „A7“ (Bezeichnung vom Analogport 7)
int sensorWert = 0; //Variable für den Sensorwert mit 0 als Startwert
int Helligkeits_Bereich = 0;  //wird im späteren Verlauf für die ausgelagerte Funktion benutzt
int UV_Bereich = 0;           //wird im späteren Verlauf für die ausgelagerte Funktion benutzt
int UVWert = 85; //auf 85 gesetzt um zu zeigen, dass ein wert auf dem Display zu sehen ist

// Variablen zur Temperaturmessung


int sensor = A2;                    // Sensor ist am analogen Pin A2 angeschlossen.
int sensorwert;
int temperatur = 0;              // Speicherung des Temperaturwertes unter der Variablen "temperatur".
int t = 5000;                         // Intervall „t“ in Millisekunden zwischen den einzelnen Messungen.
int funktion_temperatur (int);
int temperaturbereich;  

LiquidCrystal lcd(30,36,42,44,45,43);

// Variablen zur Windgeschwindigkeitsmessung

//int sensor = A3;                                          // Sensor ist am analogen Pin A3 angeschlossen.
float windgeschwindigkeit = 0.0;                  // Speicherung der Windgeschwindigkeit unter der Variablen "windgeschwindigkeit".
int t = 5000;                                                  // Messzeit „t“ in Millisekunden.
int umdrehungen = 0;
float pi = 3.1416;
float d = 0.2;                                                // Durchmesser des verwendeten Windrads (Anemometer) d = 0,2 m.
 
void setup()  
{ 
  Serial.begin(9600); 
  lcd.begin(16,2); 
  irrecv.enableIRIn();                                    //Reciever starten 
 
} 
 
void loop()  
{ 
 while(results.value != 16761405)                         //Schleife, um Eingabe zu beginnen, bzw Aufforderung bis Eingabe getätigt wurde 
  { 
   lcd.setCursor(0,0); 
   lcd.print("Eingabe bitte");                            //Aufforderung zur Eingabe auf dem Display 
    
   if (irrecv.decode(&results))                           //Decodieren des IR-Signals zur Überprüfung 
    { 
      Serial.println(results.value, DEC);                 //Ausgabe des Wertes als DEC-Zahl auf dem seriellen Monitor 
      irrecv.resume();                                    //Den nächsten Wert emfangen 
    } 
       
   if(results.value == 16738455) 
    {  
       lcd.clear(); 
       lcd.setCursor(0,0);                                //Erste Zeile 
       lcd.print("Menueauswahl: "); 
       lcd.setCursor(0,1);                                //Zweite Zeile 
       lcd.print("1.Thore"); 
       delay (2000);                                      //2 Sekunden warten 
       lcd.clear();                                       //Display löschen 
 
       lcd.setCursor(0,0);          
       lcd.print("Menueauswahl: "); 
       lcd.setCursor(0,1);          
       lcd.print("2.Laura1"); 
       delay (2000);               
       lcd.clear();                 
 
       lcd.setCursor(0,0);          
       lcd.print("Menueauswahl: "); 
       lcd.setCursor(0,1);          
       lcd.print("3.Laura2"); 
       delay (2000);                
       lcd.clear(); 
 
       lcd.setCursor(0,0);          
       lcd.print("Menueauswahl: "); 
       lcd.setCursor(0,1);          
       lcd.print("4.Jonathan"); 
       delay (2000);                
       lcd.clear(); 
 
       lcd.setCursor(0,0);          
       lcd.print("Menueauswahl: "); 
       lcd.setCursor(0,1);          
       lcd.print("5.Lukas"); 
       delay (2000);                
       lcd.clear(); 
 
       lcd.setCursor(0,0);          
       lcd.print("Menueauswahl: "); 
       lcd.setCursor(0,1);          
       lcd.print("6.Dominik"); 
       delay (2000);                
       lcd.clear(); 
 
       lcd.setCursor(0,0);          
       lcd.print("Menueauswahl: "); 
       lcd.setCursor(0,1);          
       lcd.print("7.Thore2"); 
       delay (2000);                
       lcd.clear(); 
    } 
   
  if(results.value == 16724175)                           //Thores Quelltext, Programm Nr.1 
    {  
      lcd.clear();                                        //Eingabeaufforderung auf dem Display löschen 
       
        while(results.value != 16761405)                  //Schleife des Programms bis zu manuellen Beendigung mit der "Play"-Taste 
          { 
            lcd.setCursor(0,0); 
            lcd.print("Thores Pro");                      //Programmplatzhalter 
             
              if (irrecv.decode(&results))                //Eingabe zum Beenden am Ende des Programms 
                { 
                  Serial.println(results.value, DEC);     //Ausgabe des Wertes als DEC-Zahl auf dem seriellen Monitor 
                  irrecv.resume();                        //Den nächsten Wert emfangen 
                }   
          } 
    }  
  if(results.value==16718055)                             //Lauras Quelltext, Programm Nr.2 
    { 
      lcd.clear();                                        //Eingabeaufforderung auf dem Display löschen 
       
        while(results.value != 16761405)                  //Schleife des Programms bis zu manuellen Beendigung mit der "Play"-Taste 
          { 
              sensorwert = analogRead(sensor);                               // Auslesen des Sensorwertes.
              temperatur= map(sensorwert, 0, 410, -50, 150);          // Umwandeln des Sensorwertes in die Temperatur. Dazu: 0 = -50°C, 410 = 150°C
              delay(t);
              lcd.clear();                                                                     // Löschen des Displays.                                               
              lcd.setCursor(0, 0);
              lcd.print(int(temperatur));                                            // Ausgabe der Temperatur auf dem Display.
              lcd.print((char)223);                                                     // Ausgabe des "°"-Zeichens.
              lcd.print("C");
              lcd.setCursor(0, 1);

              switch (funktion_temperatur (temperatur)) {
  
                case 1: {
                  lcd.print("sehr dick");                              // Ausgabe von "sehr dick" auf dem Display, wenn die Temperatur kleiner/ gleich -1°C ist.
                  break;
                  } 

                case 2: {
                  lcd.print("dick");                                     // Ausgabe von "dick" auf dem Display, wenn die Temperatur zwischen -1°C und 9°C liegt.
                  break;                                                     // (groeßer als -1°C und kleiner/ gleich 9°C)
                  } 

                case 3: {
                  lcd.print("langer Uebergang");              // Ausgabe von "langer Uebergang" auf dem Display, wenn die Temperatur zwischen 9°C und 17°C liegt.
                  break;                                                    // (groeßer als 9°C und kleiner/ gleich 17°C)
                  

                case 4: {
                  lcd.print("kurzer Uebergang");              // Ausgabe von "kurzer Uebergang" auf dem Display, wenn die Temperatur zwischen 17°C und 23°C liegt.
                  break;                                                    // (groeßer als 17°C und kleiner/ gleich 23°C)
                  }

                case 5: {
                  lcd.print("kurz");                                   // Ausgabe von "kurz" auf dem Display, wenn die Temperatur zwischen 23°C und 32°C liegt.
                  break;                                                   // (groeßer als 23°C und kleiner/ gleich 32°C)
                  }

                case 6: {
                  lcd.print("sehr kurz");                           // Ausgabe von "sehr kurz" auf dem Display, wenn die Temperatur groeßer als 32°C ist.
                  break;
                  }  
                }

              if (irrecv.decode(&results)) 
                { 
                  Serial.println(results.value, DEC);     //Ausgabe des Wertes als DEC-Zahl auf dem seriellen Monitor 
                  irrecv.resume();                        //Den nächsten Wert emfangen 
                } 
           } 
    } 
 
 
  if (results.value==16743045)                            //Laura2 Quelltext, Programm Nr.3 
    { 
      lcd.clear();                                        //Eingabeaufforderung auf dem Display löschen 
       
        while(results.value != 16761405)                  //Schleife des Programms bis zu manuellen Beendigung mit der "Play"-Taste 
          { 
            messung_windgeschwindigkeit();                              // Aufrufen der Funktion zur Messung der Windgeschwindigkeit.
            lcd.clear();                                                                  // Löschen des Displays.   
            lcd.setCursor(0, 0);
            lcd.print(float(windgeschwindigkeit));                       // Ausgabe der Windgeschwindigkeit auf dem Display.
            lcd.print(" km/h");                                                      // Hinter der Windgeschwindigkeit wird die Einheit "km/h" eingeblendet.
            lcd.setCursor(0, 1);

              if (windgeschwindigkeit <= 1) {                                                                                 // Ausgabe von "Windstille" auf dem Display, wenn die Windgeschwindigekit kleiner/ gleich 1 km/h ist.
                lcd.print("Windstille"); 
                }
            
              else if (1 < windgeschwindigkeit && windgeschwindigkeit <= 5) {                         // Ausgabe von "leiser Zug" auf dem Display, wenn die Windgeschwindigkeit zwischen 1 km/h und 5 km/h liegt.
                lcd.print("leiser Zug");                                                                                              // (groeßer als 1 km/h und kleiner/ gleich 5 km/h)
                } 

              else if (5 < windgeschwindigkeit && windgeschwindigkeit <= 11) {                        // Ausgabe von "leichte Brise" auf dem Display, wenn die Windgeschwindigkeit zwischen 5 km/h und 11 km/h liegt.
                lcd.print("leichte Brise");                                                                                           // (groeßer als 5 km/h und kleiner/ gleich 11 km/h)
                }

              else if (11 < windgeschwindigkeit && windgeschwindigkeit <= 19) {                      // Ausgabe von "schwache Brise" auf dem Display, wenn die Windgeschwindigkeit zwischen 11 km/h und 19 km/h liegt.
                lcd.print("schwache Brise");                                                                                      // (groeßer als 11 km/h und kleiner/ gleich 19 km/h)
                }

              else if (19 < windgeschwindigkeit && windgeschwindigkeit <= 28) {                     // Ausgabe von "maessige Brise" auf dem Display, wenn die Windgeschwindigkeit zwischen 19 km/h und 28 km/h liegt.
                lcd.print("maessige Brise");                                                                                      // (groeßer als 19 km/h und kleiner/ gleich 28 km/h)
                }

              else if (28 < windgeschwindigkeit && windgeschwindigkeit <= 38) {                      // Ausgabe von "frische Brise" auf dem Display, wenn die Windgeschwindigkeit zwischen 28 km/h und 38 km/h liegt.
                lcd.print("frische Brise");                                                                                           // (groeßer als 28 km/h und kleiner/ gleich 38 km/h)
                } 

              else if (38 < windgeschwindigkeit && windgeschwindigkeit <= 49) {                     // Ausgabe von "starker Wind" auf dem Display, wenn die Windgeschwindigkeit zwischen 38 km/h und 48 km/h liegt.
                lcd.print("starker Wind");                                                                                         // (groeßer als 38 km/h und kleiner/ gleich 49 km/h)
                }

              else if (49 < windgeschwindigkeit && windgeschwindigkeit <= 61) {                     // Ausgabe von "steifer Wind" auf dem Display, wenn die Windgeschwindigkeit zwischen 49 km/h und 61 km/h liegt.
                lcd.print("steifer Wind");                                                                                          // (groeßer als 49 km/h und kleiner/ gleich 61 km/h)
                }

              else if (61 < windgeschwindigkeit && windgeschwindigkeit <= 74) {                     // Ausgabe von "stuermisch" auf dem Display, wenn die Windgeschwindigkeit zwischen 61 km/h und 74 km/h liegt.
                lcd.print("stuermisch");                                                                                            // (groeßer als 61 km/h und kleiner/ gleich 74 km/h)
                }

              else if (74 < windgeschwindigkeit && windgeschwindigkeit <= 88) {                     // Ausgabe von "Sturm" auf dem Display, wenn die Windgeschwindigkeit zwischen 74 km/h und 88 km/h liegt.
                lcd.print("Sturm");                                                                                                   // (groeßer als 74 km/h und kleiner/ gleich 88 km/h)
                }

              else if (88 < windgeschwindigkeit && windgeschwindigkeit <= 102) {                   // Ausgabe von "schwerer Sturm" auf dem Display, wenn die Windgeschwindigkeit zwischen 88 km/h und 102 km/h liegt.
                lcd.print("schwerer Sturm");                                                                                    // (groeßer als 88 km/h und kleiner/ gleich 102 km/h)
                }

              else if (102 < windgeschwindigkeit && windgeschwindigkeit <= 117) {                 // Ausgabe von "orkanartig" auf dem Display, wenn die Windgeschwindigkeit zwischen 102 km/h und 117 km/h liegt.
                lcd.print("orkanartig");                                                                                            // (groeßer als 102 km/h und kleiner/ gleich 117 km/h)
                }

              else {                                                                                                                         // Ausgabe von "Orkan" auf dem Display, wenn die Windgeschwindigkeit groeßer als 117 km/h ist.
                lcd.print("Orkan"); 
                }

            delay(t);

           
               if (irrecv.decode(&results))  
                 { 
                  Serial.println(results.value, DEC);     //Ausgabe des Wertes als DEC-Zahl auf dem seriellen Monitor 
                  irrecv.resume();                        //Den nächsten Wert emfangen 
                 } 
          } 
    } 
 
 
  if(results.value==16716015)                             //Jonathan Quelltext, Programm Nr.4 
    { 
      lcd.clear();                                        //Eingabeaufforderung auf dem Display löschen 
    
        while(results.value != 16761405)                  //Schleife des Programms bis zu manuellen Beendigung mit der "Play"-Taste 
          { 
              {


sensorWert =analogRead(eingang); //Die Spannung an dem Fotowiderstand auslesen und unter der Variable „sensorWert“ abspeichern.
    Serial.print("   Sensorwert = " ); //Ausgabe am Serial-Monitor: Das Wort „Sensorwert: „ Dient Lediglich der Überprüfung
    Serial.println(sensorWert); //Ausgabe am Serial-Monitor. Mit dem Befehl Serial.print wird der Sensorwert des Fotowiderstandes in Form einer Zahl zwischen 0 und 1023 an den serial monitor gesendet.

//ab hier: Verarbeitung der Sensorwerte für den Photowiderstand
// Unterteilung des Wertebereichs der Helligkeit in 5 Kategorien -> die Angaben von "--" bis "++" stehen hierbei für den erforderlichen Schutz, "--" Kein Schutz erforderlich, "++" Sehr hoher Schutz Erforderlich

//Funktionsaufruf der ausgelagerten Funktion
    Helligkeits_Bereich = fun_photoresistor(sensorWert); 

switch (Helligkeits_Bereich) //Nachdem die Funktion fun_photoresistor ausgeführt wurde werden im switch-case die 5 Kategorien unterscheiden und der jeweilige Schutz für die Augen wird auf dem Display ausgegeben
{
  case 1:
  {
    Serial.print("Augenschutz: -- ");    // zur Überprüfung, ausgabe auf dem PC
    // lcd.setCursor(0,0);                 //Eigendliche Ausgabe passiert hier -> auf LCD Display
    //lcd.print("Augenschutz: -- ");
    //delay (2000);
    //lcd.clear();
    break;
  }
  case 2:
  {
    Serial.print("Augenschutz: -  ");
    //lcd.setCursor(0,0);
    //lcd.print("Augenschutz: -  ");
    break;
  }
  case 3:
  {
    Serial.print("Augenschutz: o  ");
    //lcd.setCursor(0,0);
    //lcd.print("Augenschutz: o  ");
    break;
  }    
  case 4:
  {
    Serial.print("Augenschutz: +  ");
    //lcd.setCursor(0,0);
    //lcd.print("Augenschutz: +  ");
    break;
  }
  case 5:
  {
    Serial.print("Augenschutz: ++ ");
    //lcd.setCursor(0,0);
    //lcd.print("Augenschutz: ++ ");
    break;
  }
  default:
  {
    break; 
  }
}

//ab hier: Theoretische Sensorwerte für einen UV-Sensor einpflegen.
// -> die Sensorwerte des UV-Sensors würden von 0 bis 240 gehen, wobei <10 für einen UV-Index von 0 steht und >240 für einen von 11
//Um dem Nutzer über den aktuell notwendigen Sonnenschutz zu Informieren werden die UV-Indexe von 0-11 wieder in 5 Kategorien eingeteilt

UV_Bereich = fun_uv(UVWert); 

switch (UV_Bereich)
{
  case 1:
  {
    Serial.print("Hautschutz: --  ");      // ... soll diese Meldung im seriellen Monitor erscheinen. Bedeutung: Kein Hautschtuz erforderlich.
    //lcd.setCursor(0,1);                  //Eigendliche Ausgabe passiert hier -> auf LCD Display
    //lcd.print("Hautschutz: --  "); 
    break;
  }
  case 2:
  {
    Serial.print("Hautschutz: -   "); //Bedeutung: leichter Schutz erforderlich: z.B. Hut und leichte Sonnencreme.
    // lcd.setCursor(0,1);                 
    //lcd.print("Hautschutz: -   "); 
    break;
  }
  case 3:
  {
     Serial.print("Hautschutz: o   "); // Bedeutung: Schutz erforderlich : z.B. Hut, Sonnencreme & Schatten aufsuchen.
    //lcd.setCursor(0,1);                 
    //lcd.print("Hautschutz: o   "); 
    break;
  }
  case 4:
  {
     Serial.print("Hautschutz: +   "); //Bedeutung: Aufenthalt im Freien möglichst vermeiden. Wenn doch dann nur mit hohem Schutz.
    //lcd.setCursor(0,1);                 
    //lcd.print("Hautschutz: +   "); 
    break;
  }
  case 5:
  {
     Serial.print("Hautschutz: ++  "); //Bedeutung: Aufenthalt im Freien vermeiden. Falls doch nur mit Hut, starker Sonnencreme und nicht länger als 2 Stunden
    //lcd.setCursor(0,1);                 
    //lcd.print("Hautschutz: ++  "); 
    break;
  }
  default:
  {
    break; 
  }
}   //Schließt den switch case
      
             
              if (irrecv.decode(&results))  
                { 
                 Serial.println(results.value, DEC);      //Ausgabe des Wertes als DEC-Zahl auf dem seriellen Monitor 
                 irrecv.resume();                         //Den nächsten Wert emfangen 
                } 
          } 
    } 
 
  if(results.value==16726215)                             //Lukas Quelltext, Programm Nr.5 
    { 
      lcd.clear();                                        //Eingabeaufforderung auf dem Display löschen 
       
        while(results.value != 16761405)                  //Schleife des Programms bis zu manuellen Beendigung mit der "Play"-Taste 
          { 
            lcd.setCursor(0,0); 
            lcd.print("Kampfstachel");                       //Programmplatzhalter 
               
              if (irrecv.decode(&results))  
                { 
                 Serial.println(results.value, DEC);      //Ausgabe des Wertes als DEC-Zahl auf dem seriellen Monitor 
                 irrecv.resume();                         //Den nächsten Wert emfangen  
                } 
          } 
    } 
  if(results.value==16734885)                             //Dominik Quelltext, Programm Nr.6 
    { 
      lcd.clear();                                        //Eingabeaufforderung auf dem Display löschen 
       
        while(results.value != 16761405)                  //Schleife des Programms bis zu manuellen Beendigung mit der "Play"-Taste 
          { 
            lcd.setCursor(0,0); 
            lcd.print("Dominique");                       //Programmplatzhalter 
               
              if (irrecv.decode(&results))  
                { 
                 Serial.println(results.value, DEC);      //Ausgabe des Wertes als DEC-Zahl auf dem seriellen Monitor 
                 irrecv.resume();                         //Den nächsten Wert emfangen  
                } 
          } 
    } 
    if(results.value==16728765)                             //Thore2 Quelltext, Programm Nr.7 
    { 
      lcd.clear();                                        //Eingabeaufforderung auf dem Display löschen 
       
        while(results.value != 16761405)                  //Schleife des Programms bis zu manuellen Beendigung mit der "Play"-Taste 
          { 
            lcd.setCursor(0,0); 
            lcd.print("Thore2");                       //Programmplatzhalter 
               
              if (irrecv.decode(&results))  
                { 
                 Serial.println(results.value, DEC);      //Ausgabe des Wertes als DEC-Zahl auf dem seriellen Monitor 
                 irrecv.resume();                         //Den nächsten Wert emfangen  
                } 
          } 
    } 
  }  
 
    
 lcd.clear();                                             //Letzten Text vom gestarteten Programm auf dem Display löschen 
 lcd.setCursor(0,0); 
 lcd.print("Systemneustart");                             //Mitteilung an den Nutzer, dass gleich ein neues Programm gestartet werden kann 
 lcd.setCursor(0,1); 
 lcd.print("Bitte warten"); 
  
 delay(5000); 
 lcd.clear();                                             //Mitteilung vor Ende des Loops löschen 
  
 while(results.value == 16761405)                         //Schleife, um den Wert von "results" automatisch zu verändern 
  {                                                       //Sodass results.value nicht mehr den Wert der "Play"-Taste zugewiesen hat 
   if (irrecv.decode(&results)) 
    { 
     Serial.println(results.value, DEC);                  //Ausgabe des Wertes als DEC-Zahl auf dem seriellen Monitor 
     irrecv.resume();                                     //Den nächsten Wert emfangen 
    } 
  } 
  
}

void zaehlung_umdrehungen()                                                       // Funktion zum Zaehlen der Umdrehungen.
{
umdrehungen++;                                                                           // Hochzaehlen der Anzahl der Umdrehungen.
}


void messung_windgeschwindigkeit()                                                                          // Funktion zu Messung der Windgeschwindigkeit
{
umdrehungen = 0;
attachInterrupt(digitalPinToInterrupt(3), zaehlung_umdrehungen, RISING);               // Diese Funktion bewirkt, dass die Umdrehung gezaehlt werden kann. Dabei ist der erste Parameter der angesteuerte Sensor (A3), der zweite Parameter die Funktion, die weiterverarbeitet wird und der dritte Parameter der Modus (Ansteuerung des zweiten Parameters, wenn der Pin von LOW auf HIGH wechselt).
delayMicroseconds(t);
detachInterrupt(digitalPinToInterrupt(3));                                                                    // Deaktivierung des Interrupts.
windgeschwindigkeit = (int)umdrehungen * (float)pi * (float)d / (int)t * 3600;           // Formel zur Berechnung der Windgeschwindigkeit in der Einheit km/h.
}

int fun_photoresistor(int sensorWert) //Die Funktion unterteilt die Sensorwerte des Photowiderstandes (Eingabewert)in Kategorien von 1-5. Im Anschluss wird der Helligkeits_Bereich wieder zurück gegeben(Rückgabewert)
{
  if (sensorWert < 204 )//sehr dunkel
  {
    Helligkeits_Bereich=1;
    return Helligkeits_Bereich;
  }

  if (sensorWert >204 && sensorWert < 408)//etwas heller aber noch nahezu dunkel
  {
    Helligkeits_Bereich=2;
    return Helligkeits_Bereich;
  }
  
  if (sensorWert > 408 && sensorWert < 612)//hell, vergleichbar mit im Schatten vorm Tentomax sitzend
  {
    Helligkeits_Bereich=3;
    return Helligkeits_Bereich;
  }
  
  if (sensorWert > 612 && sensorWert < 816)//hell, direkte Sonneneinstrahlung
  {
    Helligkeits_Bereich=4;
    return Helligkeits_Bereich;
  }
  
  if (sensorWert > 816 )//sehr hell, direkte Sonneneinstrahlung
  {
    Helligkeits_Bereich=5;
    return Helligkeits_Bereich;
  }  
}

int fun_uv(int UVWert)
{
  //1. Katergorie: Index 0 bis 2
  if (UVWert < 65)      // Wenn der Sensorwert kleiner als 65 ist...
  {
    UV_Bereich=1;
    return UV_Bereich;
  }
  

  //2. Katergorie: Index 3 bis 5
  if (UVWert < 124 && UVWert > 65 )
  {
    UV_Bereich=2;
    return UV_Bereich;
  }
  

  //3. Katergorie: Index 6 bis 8
  if (UVWert < 180 && UVWert > 124 )
  {
    UV_Bereich=3;
    return UV_Bereich;
  }
  

  //4. Katergorie: Index 9 bis 10
  if (UVWert < 221 && UVWert > 180 )
  {
    UV_Bereich=4;
    return UV_Bereich;
  }
  
  //5. Katergorie: Index 11 und höher
  if (UVWert > 221 )
  {
    UV_Bereich=5;
    return UV_Bereich;
  }
}

int funktion_temperatur (int temperatur){                // Funktion zur Bestimmung des Temperaturbereiches (ausgelagerte Funktion mit Rueckgabewert).

  if (temperatur <= -1) { 
    temperatur_bereich = 1;
    return temperatur_bereich; 
  }
 
  else if (-1 < temperatur && temperatur <= 9) {
    temperatur_bereich = 2;
    return temperatur_bereich;
  }

  else if (9 < temperatur && temperatur <= 17) {
    temperatur_bereich = 3;
    return temperatur_bereich;
  }

  else if (17 < temperatur && temperatur <= 23) {
    temperatur_bereich = 4;
    return temperatur_bereich;
  }

  else if (23 < temperatur && temperatur <= 32) {
    temperatur_bereich = 5;
    return temperatur_bereich;
  }

  else {
    temperatur_bereich = 6;
    return temperatur_bereich;  
  }
}                                                      